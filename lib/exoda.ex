defmodule Exoda do
  require Logger

  @moduledoc """
  An implementation of `Ecto.Adapter` that can be used
  to access remote endpoints supporting OData v4 protocol
  """

  @behaviour Ecto.Adapter

  import Ecto.Adapter

  @typep repo :: Ecto.Repo.t()
  @typep prepared :: Ecto.Adapter.prepared()
  @typep options :: Keyword.t()

  @impl true
  defmacro __before_compile__(_) do
  end

  @impl true
  @spec ensure_all_started(repo, type :: :application.restart_type) ::
    {:ok, [atom]} | {:error, atom}
  def ensure_all_started(_repo, _type) do
    #TODO: ensure logger, httpClient and other required apps are started
    {:ok, []}
  end

  @doc """
  Returns a supervisor child specification for starting http client
  """
  @impl true
  @spec child_spec(repo, options) :: :supervisor.child_spec
  def child_spec(_repo, opts) do
    Logger.debug(inspect(opts))
    Supervisor.Spec.worker(Exoda.Client, opts)
  end


  #
  ## Types

  @doc """
  Returns the loaders for a given type.

  Is used to trasform types returned from http endpoint
  to ecto types

  It receives the primitive type and the Ecto type (which may be
  primitive as well). It returns a list of loaders with the given
  type at the end.

  """
  @impl true
  @spec loaders(primitive_type :: Ecto.Type.primitive, ecto_type :: Ecto.Type.t) ::
            [(term -> {:ok, term} | :error) | Ecto.Type.t]
  def loaders(:binary_id, type), do: [Ecto.UUID, type]
  def loaders(_primitive, type), do: [type]


  @doc """
  Returns the dumpers for a given type.

  It receives the primitive type and the Ecto type (which may be
  primitive as well). It returns a list of dumpers with the given
  type at the beginning.

  It is used to translate values coming from the Ecto into a http compliant types


  """
  @impl true
  @spec dumpers(primitive_type :: Ecto.Type.primitive, ecto_type :: Ecto.Type.t) ::
            [(term -> {:ok, term} | :error) | Ecto.Type.t]
  def dumpers(:binary_id, type), do: [type, Ecto.UUID]
  def dumpers(_primitive, type), do: [type]


  #
  ## Autogenerate

  @doc """
  Called to autogenerate a value for id/embed_id/binary_id.
  
  Returns nil because ids must be autogenerated inside the storage
  """
  @impl true
  @spec autogenerate(field_type :: :id | :binary_id | :embed_id) :: term | nil | no_return
  def autogenerate(_any), do: nil


  #
  ## Queries

  @doc """
  Commands invoked to prepare a query for `all`, `update_all` and `delete_all`.

  The returned result is given to `execute/6`.
  """
  @impl true
  @spec prepare(atom :: :all | :update_all | :delete_all, query :: Ecto.Query.t) ::
              {:cache, prepared} | {:nocache, prepared}
  def prepare(query_type, query) do
    raise "Not implemented"
  end

  @doc """
  Executes a previously prepared query.

  It returns a tuple containing the number of entries and
  the result set as a list of lists. The result set may also be
  `nil` if a particular operation does not support them.

  The `meta` field is a map containing some of the fields found
  in the `Ecto.Query` struct.
  """
  @impl true
  @spec execute(repo, query_meta, query, params :: list(), options) :: result when
              result: {integer, [[term]] | nil} | no_return,
              query: {:nocache, prepared} |
                     {:cached, (prepared -> :ok), cached} |
                     {:cache, (cached -> :ok), prepared}
  def execute(repo, query_meta, query, params, opts) do
    raise "Not implemented"
  end


  #
  # Commands

  @doc """
  Creates multiple entries in the OData server
  """
  @impl true
  @spec insert_all(repo, schema_meta, header :: [atom], [fields], 
              on_conflict, returning, options) ::
              {integer, [[term]] | nil} | no_return
  def insert_all(repo, schema_meta, header, fields_list, on_conflict, returning, opts) do
    #TODO: check if batch operations are supported by the remote server
    # If not then create entities one by one
    raise "Not implemented"
  end

  @doc """
  Creates a single new entity in the OData server.

  The primary key of the created entry will be automatically included in `returning`.
  """
  @impl true
  @spec insert(repo, schema_meta, fields, on_conflict, returning, options) ::
                    {:ok, fields} | {:invalid, constraints} | no_return
  def insert(repo, schema_meta, fields, on_conflict, returning, opts) do
    raise "Not implemented"
  end
  

  @doc """
  Updates a single entity with the given filters.

  While `filters` can be any record column, it is expected that
  at least the primary key (or any other key that uniquely
  identifies an existing record) be given as a filter. Therefore,
  in case there is no record matching the given filters,
  `{:error, :stale}` is returned.
  """
  @impl true
  @spec update(repo, schema_meta, fields, filters, returning, options) ::
                    {:ok, fields} | {:invalid, constraints} |
                    {:error, :stale} | no_return
  def update(repo, schema_meta, fields, filters, returning, opts) do
    raise "Not implemented"
  end

  @doc """
  Deletes a single entity with the given filters.

  While `filters` can be any record column, it is expected that
  at least the primary key (or any other key that uniquely
  identifies an existing record) be given as a filter. Therefore,
  in case there is no record matching the given filters,
  `{:error, :stale}` is returned.
  """
  @impl true
  @spec delete(repo, schema_meta, filters, options) ::
                     {:ok, fields} | {:invalid, constraints} |
                     {:error, :stale} | no_return
  def delete(repo, schema_meta, filters, opts) do
    raise "Not implemented"
  end
end
